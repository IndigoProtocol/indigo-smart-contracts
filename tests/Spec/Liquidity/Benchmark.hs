module Spec.Liquidity.Benchmark (tests) where

import Indigo.Contracts.CDP.Common (iBTCTokenName)
import Indigo.Contracts.CDP.Common qualified as CDPParams
import Ledger qualified
import Ledger.Ada qualified as Ada
import Ledger.Value qualified as Value
import Options (SuiteOptions, setupTestBenchmarkSuite)
import Plutus.Model (MockConfig, Run, getMainUser)
import PlutusTx.Prelude hiding (check)
import Spec.Liquidity.Params
  ( CloseLiquidityPositionParam (CloseLiquidityPositionParam),
    CreateLiquidityPositionParam
      ( CreateLiquidityPositionParam,
        cTokenAmountPairs
      ),
    UpdateLiquidityPositionParam
      ( UpdateLiquidityPositionParam,
        uTokenAmountPairs
      ),
  )
import Spec.Liquidity.Transactions
  ( CloseLiquidityPositionVariation (CloseSignedByOtherUser, CloseSucceed),
    UpdateLiquidityPositionVariation (UpdateSignedByOtherUser, UpdateSucceed),
    runCloseLiquidityPosition,
    runCreateLiquidityPosition,
    runInitialize,
    runUpdateLiquidityPosition,
  )
import Test.Tasty
import Utils.Helpers
  ( ErrorMsgContains (ErrorMsgContains),
    assertLimits,
    checkFailWithMsg,
    checkNoFail,
  )
import Utils.Mock qualified as Mock
import Prelude (String)

{-
Since Indigo doesn't have any of their own LP tokens generated by the protocol,
we simply use iAssets as LP tokens. There should be no difference since
they are both Cardano Native Tokens and the Liquidity contract does not
mint/burn these tokens, we can test with any CNT.
-}
tests :: SuiteOptions -> MockConfig -> TestTree
tests suiteOpts cfg =
  let iBTCAsset =
        Value.assetClass (CDPParams.cdpAssetSymbol Mock.cdpParams) iBTCTokenName
      specs =
        [ testGroup
            "Open Liquidity Position"
            [ check
                "Open liquidity position succeeds"
                ( do
                    admin <- getMainUser
                    runCreateLiquidityPosition
                      admin
                      CreateLiquidityPositionParam
                        { cTokenAmountPairs = [(iBTCAsset, 3_000_000)]
                        }
                )
            ],
          testGroup
            "Adjust Liquidity Position"
            [ check
                "Deposit tokens to liquidity position succeeds"
                ( do
                    admin <- getMainUser
                    runCreateLiquidityPosition
                      admin
                      CreateLiquidityPositionParam
                        { cTokenAmountPairs = [(iBTCAsset, 2_000_000)]
                        }
                    runInitialize
                    runUpdateLiquidityPosition
                      admin
                      UpdateLiquidityPositionParam
                        { uTokenAmountPairs = [(iBTCAsset, 1_000_000)]
                        }
                      UpdateSucceed
                ),
              check
                "Withdraw tokens from liquidity position succeeds"
                ( do
                    admin <- getMainUser
                    runCreateLiquidityPosition
                      admin
                      CreateLiquidityPositionParam
                        { cTokenAmountPairs = [(iBTCAsset, 3_000_000)]
                        }
                    runInitialize
                    runUpdateLiquidityPosition
                      admin
                      UpdateLiquidityPositionParam
                        { uTokenAmountPairs = [(iBTCAsset, -1_000_000)]
                        }
                      UpdateSucceed
                ),
              checkFailWithMsg'
                "Withdraw tokens from another users liquidity position fails"
                (ErrorMsgContains "Must be signed by owner")
                ( do
                    admin <- getMainUser
                    runInitialize
                    runCreateLiquidityPosition
                      admin
                      CreateLiquidityPositionParam
                        { cTokenAmountPairs = [(iBTCAsset, 3_000_000)]
                        }
                    runUpdateLiquidityPosition
                      admin
                      UpdateLiquidityPositionParam
                        { uTokenAmountPairs = [(iBTCAsset, -1_000_000)]
                        }
                      UpdateSignedByOtherUser
                )
            ],
          testGroup
            "Close Liquidity Position"
            [ check
                "Close liquidity position succeeds"
                ( do
                    admin <- getMainUser
                    runCreateLiquidityPosition
                      admin
                      CreateLiquidityPositionParam
                        { cTokenAmountPairs = [(iBTCAsset, 3_000_000)]
                        }
                    runInitialize
                    runCloseLiquidityPosition
                      admin
                      CloseLiquidityPositionParam
                      CloseSucceed
                ),
              checkFailWithMsg'
                "Close another users liquidity position fails"
                (ErrorMsgContains "Must be signed by owner")
                ( do
                    admin <- getMainUser
                    runCreateLiquidityPosition
                      admin
                      CreateLiquidityPositionParam
                        { cTokenAmountPairs = [(iBTCAsset, 3_000_000)]
                        }
                    runInitialize
                    runCloseLiquidityPosition
                      admin
                      CloseLiquidityPositionParam
                      CloseSignedByOtherUser
                )
            ]
        ]
      benchmarks =
        [ assertLimits
            initialFunds
            cfg
            "init ref script"
            runInitialize,
          assertLimits
            initialFunds
            cfg
            "create liquidity position"
            ( do
                admin <- getMainUser
                runCreateLiquidityPosition
                  admin
                  CreateLiquidityPositionParam
                    { cTokenAmountPairs = [(iBTCAsset, 3_000_000)]
                    }
            ),
          assertLimits
            initialFunds
            cfg
            "update liquidity position"
            ( do
                admin <- getMainUser
                runCreateLiquidityPosition
                  admin
                  CreateLiquidityPositionParam
                    { cTokenAmountPairs = [(iBTCAsset, 2_000_000)]
                    }
                runInitialize
                runUpdateLiquidityPosition
                  admin
                  UpdateLiquidityPositionParam
                    { uTokenAmountPairs = [(iBTCAsset, 1_000_000)]
                    }
                  UpdateSucceed
            ),
          assertLimits
            initialFunds
            cfg
            "close liquidity position"
            ( do
                admin <- getMainUser
                runCreateLiquidityPosition
                  admin
                  CreateLiquidityPositionParam
                    { cTokenAmountPairs = [(iBTCAsset, 3_000_000)]
                    }
                runInitialize
                runCloseLiquidityPosition
                  admin
                  CloseLiquidityPositionParam
                  CloseSucceed
            )
        ]
   in testGroup "Liquidity" (setupTestBenchmarkSuite suiteOpts specs benchmarks)
  where
    check :: String -> Run () -> TestTree
    check = checkNoFail cfg initialFunds

    checkFailWithMsg' :: String -> ErrorMsgContains -> Run () -> TestTree
    checkFailWithMsg' = checkFailWithMsg cfg initialFunds

initialFunds :: Ledger.Value
initialFunds =
  Ada.adaValueOf 10_000_000
    <> Value.assetClassValue
      ( Value.assetClass
          (CDPParams.cdpAssetSymbol Mock.cdpParams)
          iBTCTokenName
      )
      10_000_000
